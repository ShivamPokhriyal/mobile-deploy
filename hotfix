#!/bin/python

import sys

import jenkins_utils
import git_utils
from utils import branch_exists, checkout_ref, unstaged_changes_present, \
    branch_exists_in_repos, assert_packages
from user_interaction import verify_value_with_user, \
    prompt_user_with_validation
from deploy_config import REPOS, BRANCH_BASE

HELP_MSG = """'create' creates the hotfix branches from the latest release tag.
'release' creates release tags and updates jenkins job to use it.
'finalize' updates jenkins hotfix version number and deletes release branch.
'resume' checkouts out the relevant hotfix branches.
'help' prints this message."""


def create_hotfix():
    """
    Checkout latest release tag for repos, ask user which repos need hotfixing,
    create hotfix branches for those repos and set jenkins release jobs to
    build off the newly created hotfix branches.

    NOTE: Due to repo dependencies, every hotfix effects commcare-android, but
    not every hotfix effects other repos. Thus, the release tags may not match
    up between repos. Whenever a new hotfix is created for a repo, its version
    is bumped to the latest android hotfix.
    """

    ver = get_hotfix_version_verify_branch_state()
    verify_value_with_user("Creating {} hotfix. Is this correct?".format(ver),
                           "The script detected an incorrect hotfix version.")

    hotfix_repos = get_hotfix_repos_from_user()

    git_utils.checkout_latest_hotfix_tags(ver)
    git_utils.create_hotfix_branches(ver, hotfix_repos)

    jenkins_utils.build_jobs_against_hotfix_branches(hotfix_repos)


# None -> Version
def get_hotfix_version_verify_branch_state():
    """
    Get hotfix version from git release tags and make sure there are unstaged
    local changes and the hotfix branch doesn't exist already.
    """
    if unstaged_changes_present(REPOS):
        raise Exception("one of the repos has unstaged changes, " +
                        "please stash and try again")

    ver = jenkins_utils.get_latest_release_job_version()

    branch_name = "{}{}".format(BRANCH_BASE, ver.short_string())

    def build_error(message): message.format(ver.short_string())

    if len(get_hotfix_repos(ver)) > 0:
        raise Exception(build_error("commcare_{} branch exists locally"))
    if branch_exists_in_repos(branch_name, REPOS):
        raise Exception(build_error("commcare_{} branch exists locally"))

    return ver


# None -> [List-of String]
def get_hotfix_repos_from_user():
    """
    Ask the user which repositories need hotfixes applied to them.
    """
    # String -> Boolean
    def validate_user_repo_input(user_input):
        invalid_repos = filter(lambda s: s not in REPOS, user_input.split())
        return len(list(invalid_repos)) == 0

    hotfix_repo_msg = (("Which repos need to be hotfixed?\n" +
                        "enter space delimited list including: " +
                        "{}\n").format(" ".join(REPOS)))
    hotfix_repos_raw = prompt_user_with_validation(hotfix_repo_msg,
                                                   True,
                                                   validate_user_repo_input)
    return hotfix_repos_raw.split()


def deploy_hotfix():
    """
    Create new release tags from open hotfix branches and make jenkins release
    jobs build off of them.
    """
    version = jenkins_utils.get_latest_release_job_version()
    hotfix_repos = get_hotfix_repos(version)

    verify_msg = "Releasing hotfix for repos {}; correct?".format(", ".join(hotfix_repos))
    verify_value_with_user(verify_msg, True)

    git_utils.create_hotfix_tags(hotfix_repos, version)
    jenkins_utils.build_jobs_against_hotfix_tags(hotfix_repos)


# Version -> [List-of String]
def get_hotfix_repos(version):
    """
    Find open hotfix branches.
    """
    branch_name = "{}{}".format(BRANCH_BASE, version.short_string())
    print(branch_name)
    return list(filter(lambda repo: branch_exists(repo, branch_name), REPOS))


# None -> None
def finalize_hotfix():
    """
    Close any branches opened for hotfixing and bump the hotfix version on the
    commcare-core jenkins release build.
    """
    version = jenkins_utils.get_latest_release_job_version()

    git_utils.close_hotfix_branches()

    jenkins_utils.inc_hotfix_version(version)


# None -> None
def resume_hotfix():
    """
    Checkout the last release tags and open hotfix branches for all
    repositories
    """
    print("Checking out the hotfix branches and last release for other repos.")
    print("(assumes the release tag hasn't been created for current hotfix)")
    version = jenkins_utils.get_latest_release_job_version()
    hotfix_repos = get_hotfix_repos(version)

    if len(hotfix_repos) == 0:
        print("No open hotfix branches;")
        print("make sure you're in the process of hotfixing?")
        sys.exit(0)

    branch_name = "{}{}".format(BRANCH_BASE, version.short_string())
    for repo in REPOS:
        if repo in hotfix_repos:
            checkout_ref(repo, branch_name)
        else:
            git_utils.checkout_latest_hotfix_tag(version, repo)


def main():
    assert_packages()

    if len(sys.argv) > 2:
        filename = sys.argv[0]
        arg_count = len(sys.argv) - 1
        print("{} only accepts one argument, {} provided".format(filename,
                                                                 arg_count))
        sys.exit(0)

    command = sys.argv[1]

    if command == 'create':
        create_hotfix()
    elif command == 'release':
        deploy_hotfix()
    elif command == 'finalize':
        finalize_hotfix()
    elif command == 'resume':
        resume_hotfix()
    elif command == 'help':
        print(HELP_MSG)

if __name__ == "__main__":
    main()
