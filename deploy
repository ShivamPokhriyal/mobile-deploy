#!/bin/python

import sys

import jenkins_utils
import git_utils

from update_translations import update_translations

from deploy_config import BRANCH_BASE

HELP_MSG = """'create' creates the release branches and jobs.
'release' creates release tags and updates jenkins job to use it.
'finalize' updates jenkins hotfix version number and deletes release branch
'help' prints this message."""


def create_release():
    """
    Cuts release git branches from master and creates new jenkins release jobs.
    """
    version = jenkins_utils.create_new_release_jobs()
    git_utils.create_branches_and_update_versions(BRANCH_BASE, version)


def deploy_release():
    """
    Creates minor release tags from release branch and updates jenkins jobs to
    build from that tag.
    """
    version = jenkins_utils.get_latest_release_job_version()

    tag = git_utils.create_release_tags(BRANCH_BASE, version)
    branch = '{}{}'.format(BRANCH_BASE, version.short_string())
    jenkins_utils.make_release_jobs_use_tags(branch, tag, version)
    jenkins_utils.build_release(version)
    print("Run 'deploy finalize' builds are locked in")


def deploy_finalize():
    """
    Increment the hotfix version on commcare-mobile-X.XX in prep for building
    hotfix, update translations, and removes local release branches.
    """
    version = jenkins_utils.get_latest_release_job_version()
    update_translations(version.short_string())
    jenkins_utils.inc_hotfix_version(version)
    branch = '{}{}'.format(BRANCH_BASE, version.short_string())
    git_utils.close_branches(branch)


def main():
    if len(sys.argv) > 2:
        filename = sys.argv[0]
        arg_count = len(sys.argv) - 1
        print("{} only accepts one argument, {} provided".format(filename,
                                                                 arg_count))
        sys.exit(0)

    command = sys.argv[1]

    if command == 'create':
        create_release()
    elif command == 'release':
        deploy_release()
    elif command == 'finalize':
        deploy_finalize()
    elif command == 'help':
        print(HELP_MSG)


if __name__ == "__main__":
    main()
